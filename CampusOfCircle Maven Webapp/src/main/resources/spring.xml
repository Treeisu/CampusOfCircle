<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"     
       xmlns:aop="http://www.springframework.org/schema/aop"     
       xmlns:context="http://www.springframework.org/schema/context"    
       xmlns:mvc="http://www.springframework.org/schema/mvc"     
       xmlns:tx="http://www.springframework.org/schema/tx"     
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
       xsi:schemaLocation="http://www.springframework.org/schema/aop     
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd     
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     
        http://www.springframework.org/schema/context     
        http://www.springframework.org/schema/context/spring-context-3.0.xsd     
        http://www.springframework.org/schema/mvc     
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd     
        http://www.springframework.org/schema/tx     
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
        default-autowire="byName">
        <!--第一步：开启注解功能，并且进行项目扫描，加载service及其以下的注解类-->
  		<mvc:annotation-driven /> 
  		<context:component-scan base-package="org.jiang.COC" />
  		<!--第二步：首先添加jdbc资源文件，并配置datasource进行解析--><!-- 详见请滑至底端 -->
		<context:property-placeholder location="classpath*:jdbc.properties" ignore-unresolvable="true"/>
		<!--扫描到资源文件，进行datesource配置-->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="false">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!--maxActive: 最大连接数量 -->
			<property name="maxActive" value="${jdbc.maxActive}" />
			<!--minIdle: 最小空闲连接 -->
			<property name="minIdle" value="${jdbc.minIdle}" />
			<!--maxIdle: 最大空闲连接 -->
			<property name="maxIdle" value="${jdbc.maxIdle}" />
			<!--initialSize: 初始化连接 -->
			<property name="initialSize" value="${jdbc.initialSize}" />
			<!-- 连接被泄露时是否打印 -->
			<property name="logAbandoned" value="${jdbc.logAbandoned}" />
			<!--removeAbandoned: 是否自动回收超时连接 -->
			<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
			<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
			<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
			<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
			<property name="maxWait" value="${jdbc.maxWait}" />
			<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
			<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
			<property name="numTestsPerEvictionRun" value="${jdbc.numTestsPerEvictionRun}" />
			<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
			<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
			<property name="validationQuery" value="${jdbc.validationQuery}" />
		</bean>
  		
  		<!--扫描一个hibernate的属性的配置文件-->
		<context:property-placeholder location="classpath*:hibernate.properties" ignore-unresolvable="true" />
		
		<bean id="sessionFactory"  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
 			<!--①把连接池注入到session工厂-->
			<property name="dataSource" ref="dataSource" />
			<!-- ②-把hibernate.cfg.xml文件里面的属性配置用spring方式配置 -->
			<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"></property> -->
			<property name="hibernateProperties">
				<props>
					<prop key="hibernate.dialect">${hibernate.dialect}</prop>
					<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
					<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
					<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
					<!-- 开启二级缓存 ehcache -->
					<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
					<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
					<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
					<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>
				</props>
			</property>
			<!-- ①引入实体类 -->
    		<property name="packagesToScan" value="org.jiang.COC.model"/>
		</bean>
		<!--第四步：添加事物管理的bean文件 -->
		<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"/>
		</bean>
  		<!--第五步：针对事务的传播特性进行配置 ，为了让数据进行回滚，-->	
		<!--作用就是:比如A转钱给B中途发生异常，不能A钱少了，B却没增加钱。-->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="*" />
				<tx:method name="get*" read-only="true" />
				<tx:method name="find*" read-only="true" />
				<tx:method name="select*" read-only="true" />
				<tx:method name="delete*" propagation="REQUIRED" />
				<tx:method name="update*" propagation="REQUIRED" />
				<tx:method name="add*" propagation="REQUIRED" />
				<tx:method name="insert*" propagation="REQUIRED" />
				<tx:method name="*" propagation="REQUIRED" />
			</tx:attributes>
		</tx:advice>
		<!--第六步：织入事务入口，表示给service下面的方法织入我们配置好的事务，这样service 里面的方法就可以保证统一性-->
		<aop:config>
			<aop:pointcut id="allServiceMethod"
				expression="execution(* org.cherry.CampusCircle.serviceImpl.*.*(..))" />
			<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
		</aop:config>
		<!--第五步：针对事务的传播特性进行配置 ！！！扫描注解，方式二！！！-->
		<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
      	

</beans>